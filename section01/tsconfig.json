{
  // 타입스크립트를 자바스크립트로 변환하는 과정이나 타입 검사 등에 상세한 옵션을 설정할 때에는 
  // 아래 compilerOptions 항목 안에 옵션을 설정한다.
  "compilerOptions": {
    // 생성되는 자바스크립트의 버전 설정
    "target": "ESNext",
    // 어떤 모듈 시스템 적용할건지
    "module": "ESNext",
    // 생성되는 자바스크립트의 경로 설정을 통해 타입스크리트 작성하는 공간이랑 분리할 수 있음
    "outDir": "dist",
    // 컴파일 할 때 얼마나 엄격하게 타입 검사를 할 것인지
    "strict": true,
    // 기본적으로 모든 타입스크립트 파일은 전역 모듈로 취급받기 때문에 두 개의 다른 파일에서 같은 이름의 변수를 사용하는 것이 불가능
    // 이걸 가능하게 하려면 파일 안에 export같은 모듈 시스템을 사용하는 키워드를 하나라도 넣어서 개별 모듈로 취급받도록 해야함
    // 이 때 모듈 시스템 키워드 사용없이 moduleDetection 옵션을 force로 설정만 해주면 타입스크립트 컴파일러가 자바스크립트로 컴파일 할 때 module 옵션을 확인하고 자동으로 설정된 모듈 시스템에 해당되는 키워드 코드를 추가해줌
    "moduleDetection": "force"
  },
  "ts-node": {
    // ts-node는 CommonJS 모듈 시스템을 사용하기 때문에 ES 모듈 시스템을 이해하지 못해서 ts-node src/index.ts 명령어를 터미널에 입력하면 오류가 발생한다
    // package.json에 "type": "module"을 추가하고 tsconfig.json에서 아래의 "esm" 옵션을 true로 설정해주면 ts-node가 es 모듈 시스템으로 동작하게 되기 때문에 ts-node 명령어 입력 가능해진다.
    "esm": true
  },
  // 컴파일 할 범위 설정
  "include": ["src"]
}